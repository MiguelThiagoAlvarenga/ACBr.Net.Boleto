<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ACBr.Net.Core</name>
    </assembly>
    <members>
        <member name="T:ACBr.Net.Core.CalcDigito">
            <summary>
            Class CalcDigito. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.CalcDigito.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.CalcDigito"/> class.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.CalcDigito.Calcular">
            <summary>
            Calcula o digito verificador
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.CalcDigito.CalculoPadrao">
            <summary>
            Calculoes the padrao.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.CalcDigito.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:ACBr.Net.Core.CalcDigito.Documento">
            <summary>
            Gets or sets the documento.
            </summary>
            <value>The documento.</value>
        </member>
        <member name="P:ACBr.Net.Core.CalcDigito.MultiplicadorInicial">
            <summary>
            Gets or sets the multiplicador inicial.
            </summary>
            <value>The multiplicador inicial.</value>
        </member>
        <member name="P:ACBr.Net.Core.CalcDigito.MultiplicadorFinal">
            <summary>
            Gets or sets the multiplicador final.
            </summary>
            <value>The multiplicador final.</value>
        </member>
        <member name="P:ACBr.Net.Core.CalcDigito.MultiplicadorAtual">
            <summary>
            Gets or sets the multiplicador atual.
            </summary>
            <value>The multiplicador atual.</value>
        </member>
        <member name="P:ACBr.Net.Core.CalcDigito.DigitoFinal">
            <summary>
            Gets or sets the digito final.
            </summary>
            <value>The digito final.</value>
        </member>
        <member name="P:ACBr.Net.Core.CalcDigito.ModuloFinal">
            <summary>
            Gets or sets the modulo final.
            </summary>
            <value>The modulo final.</value>
        </member>
        <member name="P:ACBr.Net.Core.CalcDigito.SomaDigitos">
            <summary>
            Gets or sets the soma digitos.
            </summary>
            <value>The soma digitos.</value>
        </member>
        <member name="P:ACBr.Net.Core.CalcDigito.FormulaDigito">
            <summary>
            Gets or sets the formula digito.
            </summary>
            <value>The formula digito.</value>
        </member>
        <member name="T:ACBr.Net.Core.Device.ACBrDevice">
            <summary>
            Class ACBrDevice. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Device.ACBrDevice.ACBrDeviceAtivarPortaException">
            <summary>
            The ac br device ativar porta exception
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Device.ACBrDevice.ACBrDeviceAtivarException">
            <summary>
            The ac br device ativar exception
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Device.ACBrDevice.ACBrDeviceSetBaudException">
            <summary>
            The ac br device set baud exception
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Device.ACBrDevice.ACBrDeviceSetDataException">
            <summary>
            The ac br device set data exception
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Device.ACBrDevice.ACBrDeviceSetPortaException">
            <summary>
            The ac br device set porta exception
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Device.ACBrDevice.ACBrDeviceEnviaStrThreadException">
            <summary>
            The ac br device envia string thread exception
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Device.ACBrDevice.ComPort">
            <summary>
            The COM port
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Device.ACBrDevice.Port">
            <summary>
            The port
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Device.ACBrDevice.Timeout">
            <summary>
            The timeout
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Device.ACBrDevice.baud">
            <summary>
            The baud
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Device.ACBrDevice.Data">
            <summary>
            The data
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Device.ACBrDevice.Hard">
            <summary>
            The hard
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Device.ACBrDevice.Soft">
            <summary>
            The soft
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Device.ACBrDevice.Interval">
            <summary>
            The interval
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Device.ACBrDevice.Hand">
            <summary>
            The hand
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Device.ACBrDevice.Stop">
            <summary>
            The stop
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Device.ACBrDevice.parity">
            <summary>
            The parity
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Device.ACBrDevice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.Device.ACBrDevice"/> class.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Device.ACBrDevice.SetPorta(System.String)">
            <summary>
            Sets the porta.
            </summary>
            <param name="value">The value.</param>
            <exception cref="T:ACBr.Net.Core.Exceptions.ACBrException"></exception>
        </member>
        <member name="M:ACBr.Net.Core.Device.ACBrDevice.SetHandshake(System.IO.Ports.Handshake)">
            <summary>
            Sets the handshake.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ACBr.Net.Core.Device.ACBrDevice.SetHardflow(System.Boolean)">
            <summary>
            Sets the hardflow.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:ACBr.Net.Core.Device.ACBrDevice.SetSoftflow(System.Boolean)">
            <summary>
            Sets the softflow.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:ACBr.Net.Core.Device.ACBrDevice.SetBaund(System.Int32)">
            <summary>
            Sets the baund.
            </summary>
            <param name="value">The value.</param>
            <exception cref="T:ACBr.Net.Core.Exceptions.ACBrException"></exception>
        </member>
        <member name="M:ACBr.Net.Core.Device.ACBrDevice.SetData(System.Int32)">
            <summary>
            Sets the data.
            </summary>
            <param name="value">The value.</param>
            <exception cref="T:ACBr.Net.Core.Exceptions.ACBrException"></exception>
        </member>
        <member name="M:ACBr.Net.Core.Device.ACBrDevice.SetTimeout(System.Int32)">
            <summary>
            Sets the timeout.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ACBr.Net.Core.Device.ACBrDevice.SetBytesInterval(System.Int32)">
            <summary>
            Sets the bytes interval.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ACBr.Net.Core.Device.ACBrDevice.SetStop(System.IO.Ports.StopBits)">
            <summary>
            Sets the stop.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ACBr.Net.Core.Device.ACBrDevice.SetParity(System.IO.Ports.Parity)">
            <summary>
            Sets the parity.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ACBr.Net.Core.Device.ACBrDevice.Ativar">
            <summary>
            Ativars this instance.
            </summary>
            <exception cref="T:ACBr.Net.Core.Exceptions.ACBrException">Dispositivo já esta ativo
            or
            or</exception>
        </member>
        <member name="M:ACBr.Net.Core.Device.ACBrDevice.Desativar">
            <summary>
            Desativars this instance.
            </summary>
            <exception cref="T:ACBr.Net.Core.Exceptions.ACBrException">Dispositivo não está ativo
            or
            Erro ao desativar o dispositivo</exception>
        </member>
        <member name="M:ACBr.Net.Core.Device.ACBrDevice.EmLinha(System.Int32)">
            <summary>
            Ems the linha.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Device.ACBrDevice.EnviaString(System.String)">
            <summary>
            Envias the string.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ACBr.Net.Core.Device.ACBrDevice.ConfigurarSerial">
            <summary>
            Configurars the serial.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Device.ACBrDevice.COMPort_ErrorReceived(System.Object,System.IO.Ports.SerialErrorReceivedEventArgs)">
            <summary>
            Handles the ErrorReceived event of the COMPort control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.IO.Ports.SerialErrorReceivedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ACBr.Net.Core.Device.ACBrDevice.COMPort_DataReceived(System.Object,System.IO.Ports.SerialDataReceivedEventArgs)">
            <summary>
            Handles the DataReceived event of the COMPort control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.IO.Ports.SerialDataReceivedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ACBr.Net.Core.Device.ACBrDevice.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:ACBr.Net.Core.Device.ACBrDevice.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:ACBr.Net.Core.Device.ACBrDevice.Ativo">
            <summary>
            Gets a value indicating whether this <see cref="T:ACBr.Net.Core.Device.ACBrDevice"/> is ativo.
            </summary>
            <value><c>true</c> if ativo; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.Device.ACBrDevice.Porta">
            <summary>
            Gets or sets the porta.
            </summary>
            <value>The porta.</value>
        </member>
        <member name="P:ACBr.Net.Core.Device.ACBrDevice.Baud">
            <summary>
            Gets or sets the baud.
            </summary>
            <value>The baud.</value>
        </member>
        <member name="P:ACBr.Net.Core.Device.ACBrDevice.DataBits">
            <summary>
            Gets or sets the data bits.
            </summary>
            <value>The data bits.</value>
        </member>
        <member name="P:ACBr.Net.Core.Device.ACBrDevice.Parity">
            <summary>
            Gets or sets the parity.
            </summary>
            <value>The parity.</value>
        </member>
        <member name="P:ACBr.Net.Core.Device.ACBrDevice.StopBits">
            <summary>
            Gets or sets the stop bits.
            </summary>
            <value>The stop bits.</value>
        </member>
        <member name="P:ACBr.Net.Core.Device.ACBrDevice.HandShake">
            <summary>
            Gets or sets the hand shake.
            </summary>
            <value>The hand shake.</value>
        </member>
        <member name="P:ACBr.Net.Core.Device.ACBrDevice.HardFlow">
            <summary>
            Gets or sets a value indicating whether [hard flow].
            </summary>
            <value><c>true</c> if [hard flow]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.Device.ACBrDevice.SoftFlow">
            <summary>
            Gets or sets a value indicating whether [soft flow].
            </summary>
            <value><c>true</c> if [soft flow]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.Device.ACBrDevice.TimeOut">
            <summary>
            Gets or sets the time out.
            </summary>
            <value>The time out.</value>
        </member>
        <member name="P:ACBr.Net.Core.Device.ACBrDevice.SendBytesCount">
            <summary>
            Gets or sets the send bytes count.
            </summary>
            <value>The send bytes count.</value>
        </member>
        <member name="P:ACBr.Net.Core.Device.ACBrDevice.SendBytesInterval">
            <summary>
            Gets or sets the send bytes interval.
            </summary>
            <value>The send bytes interval.</value>
        </member>
        <member name="P:ACBr.Net.Core.Device.ACBrDevice.ProcessMessages">
            <summary>
            Gets or sets a value indicating whether [process messages].
            </summary>
            <value><c>true</c> if [process messages]; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:ACBr.Net.ECF.EstadoECF.NaoInicializada">
            <summary>
            Porta Serial ainda nao foi aberta
            </summary>
        </member>
        <member name="F:ACBr.Net.ECF.EstadoECF.Desconhecido">
            <summary>
            Porta aberta, mas ado ainda nao definido
            </summary>
        </member>
        <member name="F:ACBr.Net.ECF.EstadoECF.Livre">
            <summary>
            Impressora Livre, sem nenhum cupom aberto, pronta para nova venda, Reducao Z e Leitura X ok, pode ou nao já ter ocorrido 1ª venda no dia...
            </summary>
        </member>
        <member name="F:ACBr.Net.ECF.EstadoECF.Venda">
            <summary>
            Cupom de Venda Aberto com ou sem venda do 1º Item
            </summary>
        </member>
        <member name="F:ACBr.Net.ECF.EstadoECF.Pagamento">
            <summary>
            Iniciado Fechamento de Cupom com Formas Pagto pode ou nao ter efetuado o 1º pagto. Nao pode mais vender itens, ou alterar Subtotal
            </summary>
        </member>
        <member name="F:ACBr.Net.ECF.EstadoECF.Relatorio">
            <summary>
            Imprimindo Cupom Fiscal Vinculado ou Relatorio Gerencial
            </summary>
        </member>
        <member name="F:ACBr.Net.ECF.EstadoECF.Bloqueada">
            <summary>
            Reduçao Z já emitida, bloqueada até as 00:00
            </summary>
        </member>
        <member name="F:ACBr.Net.ECF.EstadoECF.RequerZ">
            <summary>
            Reducao Z dia anterior nao emitida. Emita agora
            </summary>
        </member>
        <member name="F:ACBr.Net.ECF.EstadoECF.RequerX">
            <summary>
            a impressora requer Leitura X todo inicio de dia. Imprima uma Leitura X para poder vender
            </summary>
        </member>
        <member name="F:ACBr.Net.ECF.EstadoECF.NaoFiscal">
            <summary>
            Comprovante Nao Fiscal Aberto
            </summary>
        </member>
        <member name="T:ACBr.Net.Core.ACBrExpandableObjectConverter">
            <summary>
            Classe ACBrExpandableObjectConverter.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.ACBrExpandableObjectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts to.
            </summary>
            <param name="context">The context.</param>
            <param name="culture">The culture.</param>
            <param name="value">The value.</param>
            <param name="destType">Type of the dest.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:ACBr.Net.Core.Enum.CalcDigFormula">
            <summary>
            Enum CalcDigFormula
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Enum.CalcDigFormula.Modulo11">
            <summary>
            The modulo11
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Enum.CalcDigFormula.Modulo10PIS">
            <summary>
            The modulo10 pis
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Enum.CalcDigFormula.Modulo10">
            <summary>
            The modulo10
            </summary>
        </member>
        <member name="T:ACBr.Net.Core.Exceptions.ACBrException">
            <summary>
            Classe ACBrException.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Exceptions.ACBrException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.Exceptions.ACBrException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ACBr.Net.Core.Exceptions.ACBrException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.Exceptions.ACBrException"/> class.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Exceptions.ACBrException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.Exceptions.ACBrException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:ACBr.Net.Core.Exceptions.ACBrException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.Exceptions.ACBrException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:ACBr.Net.Core.Exceptions.ACBrNFeException">
            <summary>
            Classe ACBrNFeException.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Exceptions.ACBrNFeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.Exceptions.ACBrNFeException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ACBr.Net.Core.Exceptions.ACBrNFeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.Exceptions.ACBrNFeException"/> class.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Exceptions.ACBrNFeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.Exceptions.ACBrNFeException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:ACBr.Net.Core.Exceptions.ACBrNFeException.#ctor(System.Exception,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.Exceptions.ACBrNFeException"/> class.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ACBr.Net.Core.Exceptions.ACBrNFeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.Exceptions.ACBrNFeException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:ACBr.Net.Core.Exceptions.ACBrTEFException">
            <summary>
            Classe ACBrTEFException.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Exceptions.ACBrTEFException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.Exceptions.ACBrTEFException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ACBr.Net.Core.Exceptions.ACBrTEFException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.Exceptions.ACBrTEFException"/> class.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Exceptions.ACBrTEFException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.Exceptions.ACBrTEFException"/> class.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:ACBr.Net.Core.Exceptions.ACBrTEFException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.Exceptions.ACBrTEFException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:ACBr.Net.Core.Exceptions.ACBrTEFException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.Exceptions.ACBrTEFException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:ACBr.Net.Core.Extensions.AssemblyExtenssions">
            <summary>
            Classe AssemblyExtenssions.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.AssemblyExtenssions.GetPath(System.Reflection.Assembly)">
            <summary>
            Gets the path.
            </summary>
            <param name="ass">The ass.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ACBr.Net.Core.Extensions.CharExtensions">
            <summary>
            Classe CharExtensions.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.CharExtensions.ToInt32(System.Char,System.Int32)">
            <summary>
            To the int32.
            </summary>
            <param name="dados">The dados.</param>
            <param name="dRetorno">The d retorno.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:ACBr.Net.Core.Exceptions.ACBrException">Erro ao converter string</exception>
        </member>
        <member name="T:ACBr.Net.Core.Exceptions.Guard">
            <summary>
            Helper class for guard statements, which allow prettier
            code for guard clauses
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Exceptions.Guard.Against(System.Boolean,System.String)">
            <summary>
            Will throw a <see cref="T:System.InvalidOperationException"/> if the assertion
            is true, with the specificied message.
            </summary>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
            <param name="message">The message.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <example>
            Sample usage:
            <code>
            Guard.Against(string.IsNullOrEmpty(name), "Name must have a value");
            </code></example>
        </member>
        <member name="M:ACBr.Net.Core.Exceptions.Guard.Against``1(System.Boolean,System.String)">
            <summary>
            Will throw exception of type <typeparamref name="TException"/>
            with the specified message if the assertion is true
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
            <param name="message">The message.</param>
            <example>
            Sample usage:
            <code>
            <![CDATA[
            Guard.Against<ArgumentException>(string.IsNullOrEmpty(name), "Name must have a value");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:ACBr.Net.Core.Exceptions.Guard.Against``1(System.Boolean,System.String,System.Object[])">
            <summary>
            Will throw exception of type <typeparamref name="TException" />
            with the specified message if the assertion is true
            </summary>
            <typeparam name="TException">The type of the t exception.</typeparam>
            <param name="assertion">if set to <c>true</c> [assertion].</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
            <example>
            Sample usage:
            <code><![CDATA[
            Guard.Against<ArgumentException>(string.IsNullOrEmpty(name), "{0} must have a value", Object);
            ]]></code></example>
        </member>
        <member name="T:ACBr.Net.Core.Extensions.EventHandlerExtension">
            <summary>
            Classe EventHandlerExtension.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.EventHandlerExtension.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Chama o evento.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.EventHandlerExtension.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Chama o evento.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="T:ACBr.Net.Core.Extensions.ListExtension">
            <summary>
            Class IListExtension.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.ListExtension.AddText(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Adiciona uma string com quebra de linha na lista como se fosse uma ou mais linhas
            </summary>
            <param name="list">A lista.</param>
            <param name="texto">O texto.</param>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.ListExtension.AsString(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Transforma uma lista de string em uma unica string.
            </summary>
            <param name="array">The array.</param>
            <returns>String com todos os dados da lista de strings</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.ListExtension.TryGet``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Tries the get.
            </summary>
            <typeparam name="TKey">The type of the tk.</typeparam>
            <typeparam name="TValue">The type of the t value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns>V.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.ListExtension.TryGet``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Tries the get.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>V.</returns>
        </member>
        <member name="T:ACBr.Net.Core.Extensions.IntExtensions">
            <summary>
            Classe IntExtensions.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.IntExtensions.ZeroFill(System.Nullable{System.Int32},System.Int32)">
            <summary>
            Zeroes the fill.
            </summary>
            <param name="value">The value.</param>
            <param name="length">The length.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.IntExtensions.ZeroFill(System.Int32,System.Int32)">
            <summary>
            Zeroes the fill.
            </summary>
            <param name="value">The value.</param>
            <param name="length">The length.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ACBr.Net.Core.Extensions.StreamExtensions">
            <summary>
            Class StreamExtensions.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="input">The input.</param>
            <param name="destination">The destination.</param>
            <param name="bufferSize">Size of the buffer.</param>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StreamExtensions.AreEqual(System.IO.Stream,System.IO.Stream)">
            <summary>
            Ares the equal.
            </summary>
            <param name="input">The input.</param>
            <param name="other">The other.</param>
            <returns><c>true</c> if stream are equals, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:ACBr.Net.Core.Generics.GenericClone`1">
            <summary>
            Classe GenericClone implementação generica da interface ICloneable.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ACBr.Net.Core.Generics.GenericClone`1.Clone">
            <summary>
            Cria um novo objeto que é uma copia da instancia atual.
            </summary>
            <returns>T.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Generics.GenericClone`1.System#ICloneable#Clone">
            <summary>
            Cria um novo objeto que é uma copia da instancia atual.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:ACBr.Net.Core.Generics.GenericCollection`1">
            <summary>
            Classe GenericCollection.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ACBr.Net.Core.Generics.GenericCollection`1.List">
            <summary>
            The list
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Generics.GenericCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.Generics.GenericCollection`1"/> class.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Generics.GenericCollection`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Generics.GenericCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Generics.GenericCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:ACBr.Net.Core.Generics.GenericCollection`1.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:ACBr.Net.Core.Generics.GenericCollection`1.GetItem(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:T"/> with the specified index.
            </summary>
            <param name="idx">The index.</param>
            <returns>T.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            </exception>
        </member>
        <member name="T:ACBr.Net.Core.AAC.AACECF">
            <summary>
            Class AACECF. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:ACBr.Net.Core.AAC.AACECF.ValorGT">
            <summary>
            Gets or sets the valor gt.
            </summary>
            <value>The valor gt.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.AACECF.NumeroSerie">
            <summary>
            Gets or sets the numero serie.
            </summary>
            <value>The numero serie.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.AACECF.CRO">
            <summary>
            Gets or sets the cro.
            </summary>
            <value>The cro.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.AACECF.CNI">
            <summary>
            Gets or sets the cni.
            </summary>
            <value>The cni.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.AACECF.DtHrAtualizado">
            <summary>
            Gets the dt hr atualizado.
            </summary>
            <value>The dt hr atualizado.</value>
        </member>
        <member name="T:ACBr.Net.Core.AAC.Arquivo">
            <summary>
            Class Arquivo. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:ACBr.Net.Core.AAC.Arquivo.Nome">
            <summary>
            Gets or sets the nome.
            </summary>
            <value>The nome.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.Arquivo.MD5">
            <summary>
            Gets or sets the m d5.
            </summary>
            <value>The m d5.</value>
        </member>
        <member name="T:ACBr.Net.Core.AAC.ArquivoListaAutenticados">
            <summary>
            Class ArquivoListaAutenticados. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.AAC.ArquivoListaAutenticados.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.AAC.ArquivoListaAutenticados"/> class.
            </summary>
        </member>
        <member name="P:ACBr.Net.Core.AAC.ArquivoListaAutenticados.Nome">
            <summary>
            Gets or sets the nome.
            </summary>
            <value>The nome.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.ArquivoListaAutenticados.MD5">
            <summary>
            Gets or sets the m d5.
            </summary>
            <value>The m d5.</value>
        </member>
        <member name="T:ACBr.Net.Core.AAC.Arquivos">
            <summary>
            Class Arquivos. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.AAC.Arquivos.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.AAC.Arquivos"/> class.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.AAC.Arquivos.New">
            <summary>
            News this instance.
            </summary>
            <returns>Arquivo.</returns>
        </member>
        <member name="M:ACBr.Net.Core.AAC.Arquivos.System#Collections#Generic#IEnumerable{ACBr#Net#Core#AAC#Arquivo}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:ACBr.Net.Core.AAC.Arquivos.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:ACBr.Net.Core.AAC.ECFs">
            <summary>
            Class ECFs. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.AAC.ECFs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.AAC.ECFs"/> class.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.AAC.ECFs.System#Collections#Generic#IEnumerable{ACBr#Net#Core#AAC#AACECF}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:ACBr.Net.Core.AAC.ECFs.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:ACBr.Net.Core.AAC.Empresa">
            <summary>
            Class Empresa. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.AAC.Empresa.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.AAC.Empresa"/> class.
            </summary>
        </member>
        <member name="P:ACBr.Net.Core.AAC.Empresa.CNPJ">
            <summary>
            Gets or sets the CNPJ.
            </summary>
            <value>The CNPJ.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.Empresa.RazaoSocial">
            <summary>
            Gets or sets the razao social.
            </summary>
            <value>The razao social.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.Empresa.Endereco">
            <summary>
            Gets or sets the endereco.
            </summary>
            <value>The endereco.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.Empresa.Cep">
            <summary>
            Gets or sets the cep.
            </summary>
            <value>The cep.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.Empresa.Cidade">
            <summary>
            Gets or sets the cidade.
            </summary>
            <value>The cidade.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.Empresa.Uf">
            <summary>
            Gets or sets the uf.
            </summary>
            <value>The uf.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.Empresa.Telefone">
            <summary>
            Gets or sets the telefone.
            </summary>
            <value>The telefone.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.Empresa.Contato">
            <summary>
            Gets or sets the contato.
            </summary>
            <value>The contato.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.Empresa.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.Empresa.IE">
            <summary>
            Gets or sets the ie.
            </summary>
            <value>The ie.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.Empresa.IM">
            <summary>
            Gets or sets the im.
            </summary>
            <value>The im.</value>
        </member>
        <member name="T:ACBr.Net.Core.AAC.IdenticacaoPaf">
            <summary>
            Class IdenticacaoPaf. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.AAC.IdenticacaoPaf.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.AAC.IdenticacaoPaf"/> class.
            </summary>
        </member>
        <member name="P:ACBr.Net.Core.AAC.IdenticacaoPaf.Empresa">
            <summary>
            Gets the empresa.
            </summary>
            <value>The empresa.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.IdenticacaoPaf.Paf">
            <summary>
            Gets the paf.
            </summary>
            <value>The paf.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.IdenticacaoPaf.ECFsAutorizados">
            <summary>
            Gets the ec fs autorizados.
            </summary>
            <value>The ec fs autorizados.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.IdenticacaoPaf.OutrosArquivos">
            <summary>
            Gets the outros arquivos.
            </summary>
            <value>The outros arquivos.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.IdenticacaoPaf.ArquivoListaAutenticados">
            <summary>
            Gets the arquivo lista autenticados.
            </summary>
            <value>The arquivo lista autenticados.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.IdenticacaoPaf.NumeroLaudo">
            <summary>
            Gets or sets the numero laudo.
            </summary>
            <value>The numero laudo.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.IdenticacaoPaf.VersaoER">
            <summary>
            Gets or sets the versao er.
            </summary>
            <value>The versao er.</value>
        </member>
        <member name="T:ACBr.Net.Core.AAC.InfoPaf">
            <summary>
            Class InfoPaf. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.AAC.InfoPaf.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.AAC.InfoPaf"/> class.
            </summary>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.NomeAplicativo">
            <summary>
            Gets or sets the nome aplicativo.
            </summary>
            <value>The nome aplicativo.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.LinguagemAplicativo">
            <summary>
            Gets or sets the linguagem aplicativo.
            </summary>
            <value>The linguagem aplicativo.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.BancoDeDadosAplicativo">
            <summary>
            Gets or sets the banco de dados aplicativo.
            </summary>
            <value>The banco de dados aplicativo.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.SistemaOperacionalAplicativo">
            <summary>
            Gets or sets the sistema operacional aplicativo.
            </summary>
            <value>The sistema operacional aplicativo.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.VersaoAplicativo">
            <summary>
            Gets or sets the versao aplicativo.
            </summary>
            <value>The versao aplicativo.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.PrincipalExeAplicativo">
            <summary>
            Gets or sets the principal executable aplicativo.
            </summary>
            <value>The principal executable aplicativo.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.MD5Aplicativo">
            <summary>
            Gets or sets the m d5 aplicativo.
            </summary>
            <value>The m d5 aplicativo.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.TipoFuncionamento">
            <summary>
            Gets or sets the tipo funcionamento.
            </summary>
            <value>The tipo funcionamento.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.TipoIntegracao">
            <summary>
            Gets or sets the tipo integracao.
            </summary>
            <value>The tipo integracao.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.TipoDesenvolvimento">
            <summary>
            Gets or sets the tipo desenvolvimento.
            </summary>
            <value>The tipo desenvolvimento.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.RealizaPreVenda">
            <summary>
            Gets or sets a value indicating whether [realiza pre venda].
            </summary>
            <value><c>true</c> if [realiza pre venda]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.RealizaDAVECF">
            <summary>
            Gets or sets a value indicating whether [realiza davecf].
            </summary>
            <value><c>true</c> if [realiza davecf]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.RealizaDAVNaoFiscal">
            <summary>
            Gets or sets a value indicating whether [realiza dav nao fiscal].
            </summary>
            <value><c>true</c> if [realiza dav nao fiscal]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.RealizaDAVOS">
            <summary>
            Gets or sets a value indicating whether [realiza davos].
            </summary>
            <value><c>true</c> if [realiza davos]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.RealizaLancamentoMesa">
            <summary>
            Gets or sets a value indicating whether [realiza lancamento mesa].
            </summary>
            <value><c>true</c> if [realiza lancamento mesa]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.RealizaDAVConfAnexoII">
            <summary>
            Gets or sets a value indicating whether [realiza dav conf anexo ii].
            </summary>
            <value><c>true</c> if [realiza dav conf anexo ii]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.IndiceTecnicoProducao">
            <summary>
            Gets or sets a value indicating whether [indice tecnico producao].
            </summary>
            <value><c>true</c> if [indice tecnico producao]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.BarSimiliarECFRestaurante">
            <summary>
            Gets or sets a value indicating whether [bar similiar ecf restaurante].
            </summary>
            <value><c>true</c> if [bar similiar ecf restaurante]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.BarSimiliarECFComum">
            <summary>
            Gets or sets a value indicating whether [bar similiar ecf comum].
            </summary>
            <value><c>true</c> if [bar similiar ecf comum]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.BarSimiliarBalanca">
            <summary>
            Gets or sets a value indicating whether [bar similiar balanca].
            </summary>
            <value><c>true</c> if [bar similiar balanca]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.UsaImpressoraNaoFiscal">
            <summary>
            Gets or sets a value indicating whether [usa impressora nao fiscal].
            </summary>
            <value><c>true</c> if [usa impressora nao fiscal]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.DAVDiscrFormula">
            <summary>
            Gets or sets a value indicating whether [dav discr formula].
            </summary>
            <value><c>true</c> if [dav discr formula]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.TotalizaValoresLista">
            <summary>
            Gets or sets a value indicating whether [totaliza valores lista].
            </summary>
            <value><c>true</c> if [totaliza valores lista]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.TransPreVenda">
            <summary>
            Gets or sets a value indicating whether [trans pre venda].
            </summary>
            <value><c>true</c> if [trans pre venda]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.TransDAV">
            <summary>
            Gets or sets a value indicating whether [trans dav].
            </summary>
            <value><c>true</c> if [trans dav]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.RecompoeGT">
            <summary>
            Gets or sets a value indicating whether [recompoe gt].
            </summary>
            <value><c>true</c> if [recompoe gt]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.RecompoeNumSerie">
            <summary>
            Gets or sets a value indicating whether [recompoe number serie].
            </summary>
            <value><c>true</c> if [recompoe number serie]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.EmitePED">
            <summary>
            Gets or sets a value indicating whether [emite ped].
            </summary>
            <value><c>true</c> if [emite ped]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.CupomMania">
            <summary>
            Gets or sets a value indicating whether [cupom mania].
            </summary>
            <value><c>true</c> if [cupom mania]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.MinasLegal">
            <summary>
            Gets or sets a value indicating whether [minas legal].
            </summary>
            <value><c>true</c> if [minas legal]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.ParaibaLegal">
            <summary>
            Gets or sets a value indicating whether [paraiba legal].
            </summary>
            <value><c>true</c> if [paraiba legal]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.NotaLegalDF">
            <summary>
            Gets or sets a value indicating whether [nota legal df].
            </summary>
            <value><c>true</c> if [nota legal df]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.TrocoEmCartao">
            <summary>
            Gets or sets a value indicating whether [troco em cartao].
            </summary>
            <value><c>true</c> if [troco em cartao]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.AcumulaVolumeDiario">
            <summary>
            Gets or sets a value indicating whether [acumula volume diario].
            </summary>
            <value><c>true</c> if [acumula volume diario]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.ArmazenaEncerranteIniFinal">
            <summary>
            Gets or sets a value indicating whether [armazena encerrante ini final].
            </summary>
            <value><c>true</c> if [armazena encerrante ini final]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.CadastroPlacaBomba">
            <summary>
            Gets or sets a value indicating whether [cadastro placa bomba].
            </summary>
            <value><c>true</c> if [cadastro placa bomba]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.EmiteContrEncerrAposREDZLEIX">
            <summary>
            Gets or sets a value indicating whether [emite contr encerr apos redzleix].
            </summary>
            <value><c>true</c> if [emite contr encerr apos redzleix]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.ImpedeVendaVlrZero">
            <summary>
            Gets or sets a value indicating whether [impede venda VLR zero].
            </summary>
            <value><c>true</c> if [impede venda VLR zero]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.IntegradoComBombas">
            <summary>
            Gets or sets a value indicating whether [integrado COM bombas].
            </summary>
            <value><c>true</c> if [integrado COM bombas]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.CriaAbastDivergEncerrante">
            <summary>
            Gets or sets a value indicating whether [cria abast diverg encerrante].
            </summary>
            <value><c>true</c> if [cria abast diverg encerrante]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.AAC.InfoPaf.TransportePassageiro">
            <summary>
            Gets or sets a value indicating whether [transporte passageiro].
            </summary>
            <value><c>true</c> if [transporte passageiro]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ACBr.Net.Core.Events.ChaveEventArgs">
            <summary>
            Classe ChaveEventArgs.
            </summary>
        </member>
        <member name="P:ACBr.Net.Core.Events.ChaveEventArgs.Chave">
            <summary>
            Gets or sets the chave.
            </summary>
            <value>The chave.</value>
        </member>
        <member name="T:ACBr.Net.Core.AAC.TipoDesenvolvimento">
            <summary>
            Enum TipoDesenvolvimento
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.AAC.TipoDesenvolvimento.Comercial">
            <summary>
            The comercial
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.AAC.TipoDesenvolvimento.ExclusivoProprio">
            <summary>
            The exclusivo proprio
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.AAC.TipoDesenvolvimento.ExclusivoTerceirizado">
            <summary>
            The exclusivo terceirizado
            </summary>
        </member>
        <member name="T:ACBr.Net.Core.AAC.TipoFuncionamento">
            <summary>
            Enum TipoFuncionamento
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.AAC.TipoFuncionamento.StandAlone">
            <summary>
            The stand alone
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.AAC.TipoFuncionamento.EmRede">
            <summary>
            The em rede
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.AAC.TipoFuncionamento.Parametrizavel">
            <summary>
            The parametrizavel
            </summary>
        </member>
        <member name="T:ACBr.Net.Core.AAC.TipoIntegracao">
            <summary>
            Enum TipoIntegracao
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.AAC.TipoIntegracao.Retaguarda">
            <summary>
            The retaguarda
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.AAC.TipoIntegracao.PED">
            <summary>
            The ped
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.AAC.TipoIntegracao.Ambos">
            <summary>
            The ambos
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.AAC.TipoIntegracao.NaoIntegra">
            <summary>
            The nao integra
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:ACBr.Net.Core.Logging.IInternalLogger">
            <summary>
            Interface IInternalLogger
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Logging.IInternalLogger.Error(System.Object)">
            <summary>
            Errors the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.IInternalLogger.Error(System.Object,System.Exception)">
            <summary>
            Errors the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.IInternalLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Errors the format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.IInternalLogger.Fatal(System.Object)">
            <summary>
            Fatals the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.IInternalLogger.Fatal(System.Object,System.Exception)">
            <summary>
            Fatals the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.IInternalLogger.Debug(System.Object)">
            <summary>
            Debugs the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.IInternalLogger.Debug(System.Object,System.Exception)">
            <summary>
            Debugs the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.IInternalLogger.DebugFormat(System.String,System.Object[])">
            <summary>
            Debugs the format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.IInternalLogger.Info(System.Object)">
            <summary>
            Informations the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.IInternalLogger.Info(System.Object,System.Exception)">
            <summary>
            Informations the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.IInternalLogger.InfoFormat(System.String,System.Object[])">
            <summary>
            Informations the format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.IInternalLogger.Warn(System.Object)">
            <summary>
            Warns the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.IInternalLogger.Warn(System.Object,System.Exception)">
            <summary>
            Warns the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.IInternalLogger.WarnFormat(System.String,System.Object[])">
            <summary>
            Warns the format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="P:ACBr.Net.Core.Logging.IInternalLogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether this instance is error enabled.
            </summary>
            <value><c>true</c> if this instance is error enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.Logging.IInternalLogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether this instance is fatal enabled.
            </summary>
            <value><c>true</c> if this instance is fatal enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.Logging.IInternalLogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether this instance is debug enabled.
            </summary>
            <value><c>true</c> if this instance is debug enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.Logging.IInternalLogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether this instance is information enabled.
            </summary>
            <value><c>true</c> if this instance is information enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.Logging.IInternalLogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether this instance is warn enabled.
            </summary>
            <value><c>true</c> if this instance is warn enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ACBr.Net.Core.Logging.ILoggerFactory">
            <summary>
            Interface ILoggerFactory
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Logging.ILoggerFactory.LoggerFor(System.String)">
            <summary>
            Loggers for.
            </summary>
            <param name="keyName">Name of the key.</param>
            <returns>IInternalLogger.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Logging.ILoggerFactory.LoggerFor(System.Type)">
            <summary>
            Loggers for.
            </summary>
            <param name="type">The type.</param>
            <returns>IInternalLogger.</returns>
        </member>
        <member name="T:ACBr.Net.Core.Logging.Log4NetLogger">
            <summary>
            Classe Log4NetLogger.
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLogger.LogType">
            <summary>
            The i log type
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLogger.IsErrorEnabledDelegate">
            <summary>
            The is error enabled delegate
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLogger.IsFatalEnabledDelegate">
            <summary>
            The is fatal enabled delegate
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLogger.IsDebugEnabledDelegate">
            <summary>
            The is debug enabled delegate
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLogger.IsInfoEnabledDelegate">
            <summary>
            The is information enabled delegate
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLogger.IsWarnEnabledDelegate">
            <summary>
            The is warn enabled delegate
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLogger.ErrorDelegate">
            <summary>
            The error delegate
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLogger.ErrorExceptionDelegate">
            <summary>
            The error exception delegate
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLogger.ErrorFormatDelegate">
            <summary>
            The error format delegate
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLogger.FatalDelegate">
            <summary>
            The fatal delegate
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLogger.FatalExceptionDelegate">
            <summary>
            The fatal exception delegate
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLogger.DebugDelegate">
            <summary>
            The debug delegate
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLogger.DebugExceptionDelegate">
            <summary>
            The debug exception delegate
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLogger.DebugFormatDelegate">
            <summary>
            The debug format delegate
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLogger.InfoDelegate">
            <summary>
            The information delegate
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLogger.InfoExceptionDelegate">
            <summary>
            The information exception delegate
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLogger.InfoFormatDelegate">
            <summary>
            The information format delegate
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLogger.WarnDelegate">
            <summary>
            The warn delegate
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLogger.WarnExceptionDelegate">
            <summary>
            The warn exception delegate
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLogger.WarnFormatDelegate">
            <summary>
            The warn format delegate
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLogger.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLogger.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ACBr.Net.Core.Logging.Log4NetLogger"/> class.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLogger.GetPropertyGetter(System.String)">
            <summary>
            Gets the property getter.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Func&lt;System.Object, System.Boolean&gt;.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLogger.GetMethodCallForMessage(System.String)">
            <summary>
            Gets the method call for message.
            </summary>
            <param name="methodName">Name of the method.</param>
            <returns>Action&lt;System.Object, System.Object&gt;.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLogger.GetMethodCallForMessageException(System.String)">
            <summary>
            Gets the method call for message exception.
            </summary>
            <param name="methodName">Name of the method.</param>
            <returns>Action&lt;System.Object, System.Object, Exception&gt;.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLogger.GetMethodCallForMessageFormat(System.String)">
            <summary>
            Gets the method call for message format.
            </summary>
            <param name="methodName">Name of the method.</param>
            <returns>Action&lt;System.Object, System.String, System.Object[]&gt;.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLogger.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.Logging.Log4NetLogger"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLogger.Error(System.Object)">
            <summary>
            Errors the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLogger.Error(System.Object,System.Exception)">
            <summary>
            Errors the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Errors the format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLogger.Fatal(System.Object)">
            <summary>
            Fatals the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLogger.Fatal(System.Object,System.Exception)">
            <summary>
            Fatals the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLogger.Debug(System.Object)">
            <summary>
            Debugs the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLogger.Debug(System.Object,System.Exception)">
            <summary>
            Debugs the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLogger.DebugFormat(System.String,System.Object[])">
            <summary>
            Debugs the format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLogger.Info(System.Object)">
            <summary>
            Informations the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLogger.Info(System.Object,System.Exception)">
            <summary>
            Informations the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLogger.InfoFormat(System.String,System.Object[])">
            <summary>
            Informations the format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLogger.Warn(System.Object)">
            <summary>
            Warns the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLogger.Warn(System.Object,System.Exception)">
            <summary>
            Warns the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLogger.WarnFormat(System.String,System.Object[])">
            <summary>
            Warns the format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="P:ACBr.Net.Core.Logging.Log4NetLogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether this instance is error enabled.
            </summary>
            <value><c>true</c> if this instance is error enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.Logging.Log4NetLogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether this instance is fatal enabled.
            </summary>
            <value><c>true</c> if this instance is fatal enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.Logging.Log4NetLogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether this instance is debug enabled.
            </summary>
            <value><c>true</c> if this instance is debug enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.Logging.Log4NetLogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether this instance is information enabled.
            </summary>
            <value><c>true</c> if this instance is information enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.Logging.Log4NetLogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether this instance is warn enabled.
            </summary>
            <value><c>true</c> if this instance is warn enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ACBr.Net.Core.Logging.Log4NetLoggerFactory">
            <summary>
            Classe Log4NetLoggerFactory.
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLoggerFactory.LogManagerType">
            <summary>
            The log manager type
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLoggerFactory.GetLoggerByNameDelegate">
            <summary>
            The get logger by name delegate
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.Log4NetLoggerFactory.GetLoggerByTypeDelegate">
            <summary>
            The get logger by type delegate
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLoggerFactory.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ACBr.Net.Core.Logging.Log4NetLoggerFactory"/> class.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLoggerFactory.LoggerFor(System.String)">
            <summary>
            Loggers for.
            </summary>
            <param name="keyName">Name of the key.</param>
            <returns>IInternalLogger.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLoggerFactory.LoggerFor(System.Type)">
            <summary>
            Loggers for.
            </summary>
            <param name="type">The type.</param>
            <returns>IInternalLogger.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Logging.Log4NetLoggerFactory.GetGetLoggerMethodCall``1">
            <summary>
            Gets the get logger method call.
            </summary>
            <typeparam name="TParameter">The type of the t parameter.</typeparam>
            <returns>Func&lt;TParameter, System.Object&gt;.</returns>
        </member>
        <member name="T:ACBr.Net.Core.Logging.LoggerProvider">
            <summary>
            Classe LoggerProvider.
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.LoggerProvider.LoggerConfKey">
            <summary>
            The logger conf key
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.LoggerProvider.LoggerFactory">
            <summary>
            The logger factory
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.LoggerProvider._instance">
            <summary>
            The _instance
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Logging.LoggerProvider.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ACBr.Net.Core.Logging.LoggerProvider"/> class.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Logging.LoggerProvider.GetLoggerFactory(System.String)">
            <summary>
            Gets the logger factory.
            </summary>
            <param name="loggerClass">The logger class.</param>
            <returns>ILoggerFactory.</returns>
            <exception cref="T:System.ApplicationException">
            Public constructor was not found for  + loggerFactoryType
            or
            or
            Unable to instantiate:  + loggerFactoryType
            </exception>
        </member>
        <member name="M:ACBr.Net.Core.Logging.LoggerProvider.GetLoggerClass">
            <summary>
            Gets the logger class.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Logging.LoggerProvider.SetLoggersFactory(ACBr.Net.Core.Logging.ILoggerFactory)">
            <summary>
            Sets the loggers factory.
            </summary>
            <param name="loggerFactory">The logger factory.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.LoggerProvider.#ctor(ACBr.Net.Core.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.Logging.LoggerProvider"/> class.
            </summary>
            <param name="loggerFactory">The logger factory.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.LoggerProvider.LoggerFor(System.String)">
            <summary>
            Loggers for.
            </summary>
            <param name="keyName">Name of the key.</param>
            <returns>IInternalLogger.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Logging.LoggerProvider.LoggerFor(System.Type)">
            <summary>
            Loggers for.
            </summary>
            <param name="type">The type.</param>
            <returns>IInternalLogger.</returns>
        </member>
        <member name="T:ACBr.Net.Core.Logging.NLogLoggerFactory">
            <summary>
            Classe NLogLoggerFactory.
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.NLogLoggerFactory.LogManagerType">
            <summary>
            The log manager type
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.NLogLoggerFactory.CreateLoggerInstanceFunc">
            <summary>
            The create logger instance function
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLoggerFactory.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ACBr.Net.Core.Logging.NLogLoggerFactory"/> class.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLoggerFactory.LoggerFor(System.Type)">
            <summary>
            Loggers for.
            </summary>
            <param name="type">The type.</param>
            <returns>IInternalLogger.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLoggerFactory.LoggerFor(System.String)">
            <summary>
            Loggers for.
            </summary>
            <param name="keyName">Name of the key.</param>
            <returns>IInternalLogger.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLoggerFactory.CreateLoggerInstance">
            <summary>
            Creates the logger instance.
            </summary>
            <returns>Func&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="T:ACBr.Net.Core.Logging.NLogLogger">
            <summary>
            Classe NLogLogger.
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.NLogLogger.LoggerType">
            <summary>
            The logger type
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.NLogLogger.DebugPropertyGetter">
            <summary>
            The debug property getter
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.NLogLogger.ErrorPropertyGetter">
            <summary>
            The error property getter
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.NLogLogger.FatalPropertyGetter">
            <summary>
            The fatal property getter
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.NLogLogger.InfoPropertyGetter">
            <summary>
            The information property getter
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.NLogLogger.WarnPropertyGetter">
            <summary>
            The warn property getter
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.NLogLogger.DebugAction">
            <summary>
            The debug action
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.NLogLogger.ErrorAction">
            <summary>
            The error action
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.NLogLogger.WarnAction">
            <summary>
            The warn action
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.NLogLogger.InfoAction">
            <summary>
            The information action
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.NLogLogger.FatalAction">
            <summary>
            The fatal action
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.NLogLogger.DebugExceptionAction">
            <summary>
            The debug exception action
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.NLogLogger.ErrorExceptionAction">
            <summary>
            The error exception action
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.NLogLogger.WarnExceptionAction">
            <summary>
            The warn exception action
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.NLogLogger.InfoExceptionAction">
            <summary>
            The information exception action
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.NLogLogger.FatalExceptionAction">
            <summary>
            The fatal exception action
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.NLogLogger.Log">
            <summary>
            The log
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLogger.#cctor">
            <summary>
            Initializes static members of the <see cref="T:ACBr.Net.Core.Logging.NLogLogger"/> class.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLogger.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ACBr.Net.Core.Logging.NLogLogger"/> class.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLogger.Debug(System.Object,System.Exception)">
            <summary>
            Debugs the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLogger.Debug(System.Object)">
            <summary>
            Debugs the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLogger.DebugFormat(System.String,System.Object[])">
            <summary>
            Debugs the format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLogger.Error(System.Object,System.Exception)">
            <summary>
            Errors the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLogger.Error(System.Object)">
            <summary>
            Errors the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Errors the format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLogger.Fatal(System.Object,System.Exception)">
            <summary>
            Fatals the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLogger.Fatal(System.Object)">
            <summary>
            Fatals the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLogger.Info(System.Object,System.Exception)">
            <summary>
            Informations the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLogger.Info(System.Object)">
            <summary>
            Informations the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLogger.InfoFormat(System.String,System.Object[])">
            <summary>
            Informations the format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLogger.Warn(System.Object,System.Exception)">
            <summary>
            Warns the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLogger.Warn(System.Object)">
            <summary>
            Warns the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLogger.WarnFormat(System.String,System.Object[])">
            <summary>
            Warns the format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLogger.CreatePropertyGetter(System.String)">
            <summary>
            Creates the property getter.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Func&lt;System.Object, System.Boolean&gt;.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLogger.CreateSimpleAction(System.String)">
            <summary>
            Creates the simple action.
            </summary>
            <param name="methodName">Name of the method.</param>
            <returns>Action&lt;System.Object, System.String&gt;.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLogger.CreateExceptionAction(System.String)">
            <summary>
            Creates the exception action.
            </summary>
            <param name="methodName">Name of the method.</param>
            <returns>Action&lt;System.Object, System.String, Exception&gt;.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NLogLogger.GetMethodInfo(System.String,System.Type[])">
            <summary>
            Gets the method information.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="parameters">The parameters.</param>
            <returns>MethodInfo.</returns>
        </member>
        <member name="P:ACBr.Net.Core.Logging.NLogLogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether this instance is debug enabled.
            </summary>
            <value><c>true</c> if this instance is debug enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.Logging.NLogLogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether this instance is error enabled.
            </summary>
            <value><c>true</c> if this instance is error enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.Logging.NLogLogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether this instance is fatal enabled.
            </summary>
            <value><c>true</c> if this instance is fatal enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.Logging.NLogLogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether this instance is information enabled.
            </summary>
            <value><c>true</c> if this instance is information enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.Logging.NLogLogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether this instance is warn enabled.
            </summary>
            <value><c>true</c> if this instance is warn enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ACBr.Net.Core.Logging.NoLoggingInternalLogger">
            <summary>
            Classe NoLoggingInternalLogger.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NoLoggingInternalLogger.Error(System.Object)">
            <summary>
            Errors the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NoLoggingInternalLogger.Error(System.Object,System.Exception)">
            <summary>
            Errors the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NoLoggingInternalLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Errors the format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NoLoggingInternalLogger.Fatal(System.Object)">
            <summary>
            Fatals the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NoLoggingInternalLogger.Fatal(System.Object,System.Exception)">
            <summary>
            Fatals the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NoLoggingInternalLogger.Debug(System.Object)">
            <summary>
            Debugs the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NoLoggingInternalLogger.Debug(System.Object,System.Exception)">
            <summary>
            Debugs the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NoLoggingInternalLogger.DebugFormat(System.String,System.Object[])">
            <summary>
            Debugs the format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NoLoggingInternalLogger.Info(System.Object)">
            <summary>
            Informations the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NoLoggingInternalLogger.Info(System.Object,System.Exception)">
            <summary>
            Informations the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NoLoggingInternalLogger.InfoFormat(System.String,System.Object[])">
            <summary>
            Informations the format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NoLoggingInternalLogger.Warn(System.Object)">
            <summary>
            Warns the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NoLoggingInternalLogger.Warn(System.Object,System.Exception)">
            <summary>
            Warns the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NoLoggingInternalLogger.WarnFormat(System.String,System.Object[])">
            <summary>
            Warns the format.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="P:ACBr.Net.Core.Logging.NoLoggingInternalLogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether this instance is error enabled.
            </summary>
            <value><c>true</c> if this instance is error enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.Logging.NoLoggingInternalLogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether this instance is fatal enabled.
            </summary>
            <value><c>true</c> if this instance is fatal enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.Logging.NoLoggingInternalLogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether this instance is debug enabled.
            </summary>
            <value><c>true</c> if this instance is debug enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.Logging.NoLoggingInternalLogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether this instance is information enabled.
            </summary>
            <value><c>true</c> if this instance is information enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ACBr.Net.Core.Logging.NoLoggingInternalLogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether this instance is warn enabled.
            </summary>
            <value><c>true</c> if this instance is warn enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:ACBr.Net.Core.Logging.NoLoggingLoggerFactory">
            <summary>
            Classe NoLoggingLoggerFactory.
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Logging.NoLoggingLoggerFactory.Nologging">
            <summary>
            The nologging
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NoLoggingLoggerFactory.LoggerFor(System.String)">
            <summary>
            Loggers for.
            </summary>
            <param name="keyName">Name of the key.</param>
            <returns>IInternalLogger.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Logging.NoLoggingLoggerFactory.LoggerFor(System.Type)">
            <summary>
            Loggers for.
            </summary>
            <param name="type">The type.</param>
            <returns>IInternalLogger.</returns>
        </member>
        <member name="T:ACBr.Net.Core.Util.CertificadoDigital">
            <summary>
            Classe CertificadoDigital.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Util.CertificadoDigital.Assinar(System.String,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Assina a NFe usando o certificado informado.
            </summary>
            <param name="nFe">A NFe.</param>
            <param name="pUri">A Url.</param>
            <param name="pCertificado">O certificado.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Exception">Erro ao efetuar assinatura digital, detalhes:  + ex.Message</exception>
        </member>
        <member name="M:ACBr.Net.Core.Util.CertificadoDigital.SelecionarCertificado(System.String)">
            <summary>
            Busca certificados instalado se informado uma serie
            se não abre caixa de dialogos de certificados.
            </summary>
            <param name="cerSerie">Serie do certificado.</param>
            <returns>X509Certificate2.</returns>
            <exception cref="T:System.Exception">
            Nenhum certificado digital foi selecionado ou o certificado selecionado está com problemas.
            or
            Certificado digital não encontrado
            or
            </exception>
        </member>
        <member name="M:ACBr.Net.Core.Util.CertificadoDigital.SelecionarCertificado(System.String,System.String)">
            <summary>
            Seleciona um certificado informando o caminho e a senha.
            </summary>
            <param name="caminho">O caminho.</param>
            <param name="senha">A senha.</param>
            <returns>X509Certificate2.</returns>
            <exception cref="T:System.Exception">Arquivo do Certificado digital não encontrado</exception>
        </member>
        <member name="M:ACBr.Net.Core.Util.CertificadoDigital.ValidarXml(System.String,System.String,System.String[]@)">
            <summary>
            Validars the XML.
            </summary>
            <param name="arquivoXml">The arquivo XML.</param>
            <param name="schemaNf">The schema nf.</param>
            <param name="erros">The erro.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Util.CertificadoDigital.ValidationEventHandler(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Validations the event handler.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Xml.Schema.ValidationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:ACBr.Net.Core.StaticRandom">
            <summary>
            Thread-safe equivalent of System.Random, using just static methods.
            If all you want is a source of random numbers, this is an easy class to
            use. If you need to specify your own seeds (eg for reproducible sequences
            of numbers), use System.Random.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.StaticRandom.Next">
            <summary>
            Returns a nonnegative random number. 
            </summary>		
            <returns>A 32-bit signed integer greater than or equal to zero and less than Int32.MaxValue.</returns>
        </member>
        <member name="M:ACBr.Net.Core.StaticRandom.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum. 
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to zero, and less than maxValue; 
            that is, the range of return values includes zero but not maxValue.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">maxValue is less than zero.</exception>
        </member>
        <member name="M:ACBr.Net.Core.StaticRandom.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range. 
            </summary>
            <param name="min">The inclusive lower bound of the random number returned. </param>
            <param name="max">
            The exclusive upper bound of the random number returned. 
            maxValue must be greater than or equal to minValue.
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to minValue and less than maxValue;
            that is, the range of return values includes minValue but not maxValue.
            If minValue equals maxValue, minValue is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">minValue is greater than maxValue.</exception>
        </member>
        <member name="M:ACBr.Net.Core.StaticRandom.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:ACBr.Net.Core.StaticRandom.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException">buffer is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="T:ACBr.Net.Core.TEF.UtilTEF">
            <summary>
            Classe UtilTEF.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.TEF.UtilTEF.BringWindowToFocus(System.IntPtr)">
            <summary>
            Brings the window to focus.
            </summary>
            <param name="hWnd">The h WND.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ACBr.Net.Core.TEF.UtilTEF.BloquearTecladoMouse(System.Boolean)">
            <summary>
            Bloquears the teclado mouse.
            </summary>
            <param name="fBlockIt">if set to <c>true</c> [f block it].</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ACBr.Net.Core.TEF.UtilTEF.PeekMessage(ACBr.Net.Core.TEF.UtilTEF.Msg@,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Peeks the message.
            </summary>
            <param name="lpMsg">The lp MSG.</param>
            <param name="hWnd">The h WND.</param>
            <param name="wMsgFilterMin">The w MSG filter minimum.</param>
            <param name="wMsgFilterMax">The w MSG filter maximum.</param>
            <param name="wRemoveMsg">The w remove MSG.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ACBr.Net.Core.TEF.UtilTEF.LimparTeclado">
            <summary>
            Limpars the teclado.
            </summary>
        </member>
        <member name="T:ACBr.Net.Core.TEF.UtilTEF.Msg">
            <summary>
            Struct MSG
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.TEF.UtilTEF.Msg.hwnd">
            <summary>
            The HWND
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.TEF.UtilTEF.Msg.message">
            <summary>
            The message
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.TEF.UtilTEF.Msg.wParam">
            <summary>
            The w parameter
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.TEF.UtilTEF.Msg.lParam">
            <summary>
            The l parameter
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.TEF.UtilTEF.Msg.time">
            <summary>
            The time
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.TEF.UtilTEF.Msg.pt">
            <summary>
            The pt
            </summary>
        </member>
        <member name="T:ACBr.Net.Core.Extensions.ACBrComponentExtensions">
            <summary>
            Classe ACBrComponentExtensions.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.ACBrComponentExtensions.EventAssigned``1(``0,System.String)">
            <summary>
            Determina se um evento esta setado ou não
            </summary>
            <typeparam name="T"></typeparam>
            <param name="comp">Componente ACBr.Net</param>
            <param name="evento">Nome do evento</param>
            <returns><c>true</c> se o evento foi setado, <c>false</c> Senão.</returns>
        </member>
        <member name="T:ACBr.Net.Core.Extensions.DateTimeExtensions">
            <summary>
            Classe DateTimeExtensions.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.DateTimeExtensions.GetIdade(System.DateTime)">
            <summary>
            Gets the idade.
            </summary>
            <param name="dtNascimento">The dt nascimento.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.DateTimeExtensions.GetIdade(System.Nullable{System.DateTime})">
            <summary>
            Gets the idade.
            </summary>
            <param name="dtNascimento">The dt nascimento.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.DateTimeExtensions.GetIdadeFull(System.DateTime)">
            <summary>
            Gets the idade full.
            </summary>
            <param name="dtNascimento">The dt nascimento.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.DateTimeExtensions.GetIdadeFull(System.Nullable{System.DateTime})">
            <summary>
            Gets the idade full.
            </summary>
            <param name="dtNascimento">The dt nascimento.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.DateTimeExtensions.CalcularFatorVencimento(System.DateTime)">
            <summary>
            Calculars the fator vencimento.
            </summary>
            <param name="dataVencimento">The data vencimento.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.DateTimeExtensions.ToJulianDate(System.DateTime)">
            <summary>
            To the julian date.
            </summary>
            <param name="data">The data.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ACBr.Net.Core.Extensions.DecimalExtensions">
            <summary>
            Classe DecimalExtensions.
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Extensions.DecimalExtensions.Qualificadores">
            <summary>
            The qualificadores
            </summary>
        </member>
        <member name="F:ACBr.Net.Core.Extensions.DecimalExtensions.Numeros">
            <summary>
            The numeros
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.DecimalExtensions.DecimalPlacesCount(System.Decimal)">
            <summary>
            Decimals the places count.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.DecimalExtensions.ToCurrency(System.Decimal)">
            <summary>
            To the currency.
            </summary>
            <param name="amount">The amount.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.DecimalExtensions.ToCurrency(System.Nullable{System.Decimal})">
            <summary>
            To the currency.
            </summary>
            <param name="amount">The amount.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.DecimalExtensions.InvertSignal(System.Decimal)">
            <summary>
            Inverts the signal.
            </summary>
            <param name="amount">The amount.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.DecimalExtensions.InvertSignal(System.Nullable{System.Decimal})">
            <summary>
            Inverts the signal.
            </summary>
            <param name="amount">The amount.</param>
            <returns>System.Nullable&lt;System.Decimal&gt;.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.DecimalExtensions.ToExtension(System.Decimal,System.Boolean)">
            <summary>
            To the extension.
            </summary>
            <param name="amount">The amount.</param>
            <param name="invertersinal">if set to <c>true</c> [invertersinal].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.DecimalExtensions.ToExtension(System.Nullable{System.Decimal},System.Boolean)">
            <summary>
            To the extension.
            </summary>
            <param name="amount">The amount.</param>
            <param name="invertersinal">if set to <c>true</c> [invertersinal].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.DecimalExtensions.ToDecimalString(System.Decimal,System.Int32,System.Int32)">
            <summary>
            To the remessa string.
            </summary>
            <param name="ammount">The ammount.</param>
            <param name="zerofill">The zerofill.</param>
            <param name="decimalPlaces">The decimal places.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.DecimalExtensions.ATruncate(System.Decimal,System.Int32)">
            <summary>
            as the truncate.
            </summary>
            <param name="value">The value.</param>
            <param name="decimalPlaces">The decimal places.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="T:ACBr.Net.Core.Extensions.ObjectExtension">
            <summary>
            Classe ObjectExtension.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.ObjectExtension.IsIn``1(``0,``0[])">
            <summary>
            Determines whether the specified t is in.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t">The t.</param>
            <param name="values">The values.</param>
            <returns><c>true</c> if the specified t is in; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.ObjectExtension.ThrowIfNull``1(``0,System.String)">
            <summary>
            Throws an ArgumentNullException if the given data item is null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The item to check for nullity.</param>
            <param name="name">The name to use when throwing an exception, if necessary</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.ObjectExtension.ThrowIfNull``1(``0)">
            <summary>
            Throws an ArgumentNullException if the given data item is null.
            No parameter name is specified.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The item to check for nullity.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.ObjectExtension.IsNull``1(``0)">
            <summary>
            Determines whether the specified value is null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified value is null; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:ACBr.Net.Core.Extensions.StringExtensions">
            <summary>
            Class StringExtensions.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.Encrypt(System.String,System.String)">
            <summary>
            Encrypts the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="key">The key.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Exception">Erro ao criptografar a string</exception>
            <exception cref="T:System.Exception">Erro ao criptografar string</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.Decrypt(System.String,System.String)">
            <summary>
            Decrypts the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="key">The key.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Exception">Erro ao descriptografar string</exception>
            <exception cref="T:System.Exception">Erro ao descriptografar string</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.ToMd5Hash(System.String)">
            <summary>
            To the m d5 hash.
            </summary>
            <param name="input">The input.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Exception">Erro ao gerar hash MD5</exception>
            <exception cref="T:System.Exception">Erro ao gerar hash MD5</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.ToSha1Hash(System.String)">
            <summary>
            To the sh a1 hash.
            </summary>
            <param name="input">The input.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Exception">Erro ao gerar SHA1 hash</exception>
            <exception cref="T:System.Exception">Erro ao gerar SHA1 hash</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.StringReverse(System.String)">
            <summary>
            Strings the reverse.
            </summary>
            <param name="toReverse">To reverse.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Exception">Erro ao reverter string</exception>
            <exception cref="T:System.Exception">Erro ao reverter string</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.Formatar(System.String,System.String)">
            <summary>
            Formatars the specified valor.
            </summary>
            <param name="valor">The valor.</param>
            <param name="mascara">The mascara.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Exception">Erro ao formatar string</exception>
            <exception cref="T:System.Exception">Erro ao formatar string</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.ToDouble(System.String,System.Double)">
            <summary>
            To the double.
            </summary>
            <param name="dados">The dados.</param>
            <param name="def">The definition.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.Exception">Erro ao converter string</exception>
            <exception cref="T:System.Exception">Erro ao converter string</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.ToDecimal(System.String,System.Decimal)">
            <summary>
            To the decimal.
            </summary>
            <param name="dados">The dados.</param>
            <param name="def">The definition.</param>
            <returns>System.Decimal.</returns>
            <exception cref="T:System.Exception">Erro ao converter string</exception>
            <exception cref="T:System.Exception">Erro ao converter string</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.ToInt32(System.String,System.Int32)">
            <summary>
            To the int32.
            </summary>
            <param name="dados">The dados.</param>
            <param name="def">The definition.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.Exception">Erro ao converter string</exception>
            <exception cref="T:System.Exception">Erro ao converter string</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.ToInt64(System.String,System.Int64)">
            <summary>
            To the int64.
            </summary>
            <param name="dados">The dados.</param>
            <param name="def">The definition.</param>
            <returns>Int64.</returns>
            <exception cref="T:System.Exception">Erro ao converter string</exception>
            <exception cref="T:System.Exception">Erro ao converter string</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.ToData(System.String)">
            <summary>
            To the data.
            </summary>
            <param name="dados">The dados.</param>
            <returns>DateTime.</returns>
            <exception cref="T:System.Exception">Erro ao converter string</exception>
            <exception cref="T:System.Exception">Erro ao converter string</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.OnlyNumbers(System.String)">
            <summary>
            Retorna apenas os numeros da string.
            </summary>
            <param name="toNormalize">String para processar.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Exception">Erro ao processar a string</exception>
            <exception cref="T:System.Exception">Erro ao processar a string</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.IsCep(System.String)">
            <summary>
            Determines whether the specified cep is cep.
            </summary>
            <param name="cep">The cep.</param>
            <returns><c>true</c> if the specified cep is cep; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.Exception">Erro ao validar CEP</exception>
            <exception cref="T:System.Exception">Erro ao validar CEP</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.IsCPFOrCNPJ(System.String)">
            <summary>
            Checar se a string é um [CPF ou CNPJ] válido.
            </summary>
            <param name="cpfcnpj">CPFCNPJ</param>
            <returns><c>true</c> se o [CPF ou CNPJ] é válido; senão, <c>false</c>.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.IsCPF(System.String)">
            <summary>
            Checa se a string é um CPF válido.
            </summary>
            <param name="vrCPF">CPF</param>
            <returns><c>true</c> se o CPF for válido; senão, <c>false</c>.</returns>
            <exception cref="T:System.Exception">Erro ao validar CPF</exception>
            <exception cref="T:System.Exception">Erro ao validar CPF</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.IsCNPJ(System.String)">
            <summary>
            Checa se a string é um CNPJ válido.
            </summary>
            <param name="vrCNPJ">CNPJ.</param>
            <returns><c>true</c> se o CNPJ for válido; senão, <c>false</c>.</returns>
            <exception cref="T:System.Exception">Erro ao validar CNPJ</exception>
            <exception cref="T:System.Exception">Erro ao validar CNPJ</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.IsIe(System.String,System.String)">
            <summary>
            Determines whether the specified p inscr is ie.
            </summary>
            <param name="pInscr">The p inscr.</param>
            <param name="pUF">The p uf.</param>
            <returns><c>true</c> if the specified p inscr is ie; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.Exception">Erro ao IE</exception>
            <exception cref="T:System.Exception">Erro ao IE</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.IsPIS(System.String)">
            <summary>
            Determines whether the specified pis is pis.
            </summary>
            <param name="pis">The pis.</param>
            <returns><c>true</c> if the specified pis is pis; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.Exception">Erro ao validar PIS</exception>
            <exception cref="T:System.Exception">Erro ao validar PIS</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.IsEmail(System.String)">
            <summary>
            Determines whether the specified email is email.
            </summary>
            <param name="email">The email.</param>
            <returns><c>true</c> if the specified email is email; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.Exception">Erro ao validar Email</exception>
            <exception cref="T:System.Exception">Erro ao validar Email</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.IsSite(System.String)">
            <summary>
            Determines whether the specified site is site.
            </summary>
            <param name="site">The site.</param>
            <returns><c>true</c> if the specified site is site; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.Exception">Erro ao validar endereço web</exception>
            <exception cref="T:System.Exception">Erro ao validar endereço web</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.IsNumeric(System.String)">
            <summary>
            Verifica se a string é numerica.
            </summary>
            <param name="strNum">The string number.</param>
            <returns>Retorna true/false se a string é numerica</returns>
            <exception cref="T:System.Exception">Erro ao validar string</exception>
            <exception cref="T:System.Exception">Erro ao validar string</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.ToUtf8(System.String)">
            <summary>
            Converte a string para UTF8.
            </summary>
            <param name="value">The text.</param>
            <returns>Uma string com a codificação UTF8</returns>
            <exception cref="T:System.Exception">Erro ao codificar string</exception>
            <exception cref="T:System.Exception">Erro ao codificar string</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.ToXmlString(System.String)">
            <summary>
            To the XML string.
            </summary>
            <param name="value">The text.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Exception">Erro ao codificar string</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.AsString(System.String[])">
            <summary>
            Transforma um array de string em uma unica string.
            </summary>
            <param name="array">The array.</param>
            <returns>String com todos os dados do array de strings</returns>
            <exception cref="T:System.Exception">Erro ao converter array</exception>
            <exception cref="T:System.Exception">Erro ao converter array</exception>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.StringFill(System.String,System.Int32,System.Char,System.Boolean)">
            <summary>
            Alinha a string a direita/esquerda e preenche com caractere informado ate ficar do tamanho especificado.
            </summary>
            <param name="text">O texto</param>
            <param name="length">Tamanho final desejado</param>
            <param name="with">Caractere para preencher</param>
            <param name="esquerda">Direção do preenchimento</param>
            <returns>String do tamanho especificado e se menor complementada com o caractere informado a direita/esquerda</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.FillRight(System.String,System.Int32,System.Char)">
            <summary>
            Alinha a string a direita e preenche a esquerda com o caracter informado até ficar do tamanho especificado.
            Se tamanho menor que a string atual retorna uma string do tamanho especificado.
            </summary>
            <param name="text">O texto.</param>
            <param name="length">Tamanho final desejado</param>
            <param name="with">Caractere para preencher</param>
            <returns>String do tamanho especificado e se menor complementada com o caractere informado a esquerda</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.FillLeft(System.String,System.Int32,System.Char)">
            <summary>
            Alinha a string a esquerda e preenche a direita com o caracter informado até ficar do tamanho especificado.
            Se tamanho menor que a string atual retorna uma string do tamanho especificado.
            </summary>
            <param name="text">O texto.</param>
            <param name="length">Tamanho final desejado</param>
            <param name="with">Caractere para preencher</param>
            <returns>String do tamanho especificado e se menor complementada com o caractere informado a direita</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.ZeroFill(System.String,System.Int32)">
            <summary>
            Preenche uma string com zero a direita/esquerda ate ficar do tamanho especificado.
            </summary>
            <param name="text">The text.</param>
            <param name="length">Tamanho final desejado</param>
            <returns>String do tamanho especificado e se menor complementada com zero a direita/esquerda</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.RemoveCe(System.String)">
            <summary>
            Normalize e substitui os caracteres especiais de uma string.
            </summary>
            <param name="value">The text.</param>
            <returns>String sem carateres especiais e normalizada</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.SubstituiCe(System.String)">
            <summary>
            Substitue os caracteres especiais de uma string.
            </summary>
            <param name="text">The text.</param>
            <returns>String sem carateres especiais</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.FormataCPFCNPJ(System.String)">
            <summary>
            Formata o CPF ou CNPJ no formato: 000.000.000-00, 00.000.000/0001-00 respectivamente.
            </summary>
            <param name="value">The text.</param>
            <returns>CPF/CNPJ Formatado</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.FormataCPF(System.String)">
            <summary>
            Formata o número do CPF 92074286520 para 920.742.865-20
            </summary>
            <param name="cpf">Sequencia numérica de 11 dígitos. Exemplo: 00000000000</param>
            <returns>CPF formatado</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.FormataCNPJ(System.String)">
            <summary>
            Formata o CNPJ. Exemplo 00.316.449/0001-63
            </summary>
            <param name="cnpj">Sequencia numérica de 14 dígitos. Exemplo: 00000000000000</param>
            <returns>CNPJ formatado</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.FormataCEP(System.String)">
            <summary>
            Formato o CEP em 00.000-000
            </summary>
            <param name="cep">Sequencia numérica de 8 dígitos. Exemplo: 00000000</param>
            <returns>CEP formatado</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.FormataAgenciaConta(System.String,System.String,System.String,System.String)">
            <summary>
            Formata agência e conta
            </summary>
            <param name="agencia">Código da agência</param>
            <param name="digitoAgencia">Dígito verificador da agência. Pode ser vazio.</param>
            <param name="conta">Código da conta</param>
            <param name="digitoConta">dígito verificador da conta. Pode ser vazio.</param>
            <returns>Agência e conta formatadas</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Get substring of specified number of characters on the right.
            </summary>
            <param name="value">The text.</param>
            <param name="length">The length.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.FromJulianDate(System.String)">
            <summary>
            Froms the julian date.
            </summary>
            <param name="julianDate">The julian date.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.SafeReplace(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Safes the replace.
            </summary>
            <param name="original">The original.</param>
            <param name="wordToFind">The word to find.</param>
            <param name="replacement">The replacement.</param>
            <param name="ignorecase">if set to <c>true</c> [ignorecase].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.ToTitleCase(System.String)">
            <summary>
            To the title case.
            </summary>
            <param name="text">The text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.IsEmpty(System.String)">
            <summary>
            Determines whether the specified value is empty.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified value is empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.Before(System.String,System.Int32)">
            <summary>
            Befores the specified end.
            </summary>
            <param name="value">The value.</param>
            <param name="end">The end.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.After(System.String,System.Int32)">
            <summary>
            Afters the specified start.
            </summary>
            <param name="value">The value.</param>
            <param name="start">The start.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.Between(System.String,System.Int32,System.Int32)">
            <summary>
            Betweens the specified start.
            </summary>
            <param name="value">The value.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.StringExtensions.Substitute(System.String,System.Object[])">
            <summary>
            Substitutes the specified arguments.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:ACBr.Net.Core.Extensions.XmlNodeExtensions">
            <summary>
            Class XmlNodeExtensions.
            </summary>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.XmlNodeExtensions.AsString(System.Xml.XmlNode,System.Boolean,System.Boolean)">
            <summary>
            Retorna a XML como string
            </summary>
            <param name="xmlDoc">The XML document.</param>
            <param name="identado">Se for <c>true</c> o XML sai [identado].</param>
            <param name="showDeclaration">if set to <c>true</c> [show declaration].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.XmlNodeExtensions.AsString(System.Xml.XmlNode,System.Boolean,System.Boolean,System.Text.Encoding)">
            <summary>
            Retorna a XML como string
            </summary>
            <param name="xmlDoc">The XML document.</param>
            <param name="identado">Se for <c>true</c> o XML sai [identado].</param>
            <param name="showDeclaration">if set to <c>true</c> [show declaration].</param>
            <param name="encode">O enconding do XML.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.XmlNodeExtensions.AddTag(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Adiciona uma tag ao documento ignorando os elementos nulos.
            </summary>
            <param name="xmlDoc">The XML document.</param>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.XmlNodeExtensions.AddTag(System.Xml.XmlNode,System.Xml.XmlNode[])">
            <summary>
            Adiciona varias tag ao documento ignorando os elementos nulos.
            </summary>
            <param name="xmlDoc">The XML document.</param>
            <param name="tags">The tags.</param>
        </member>
        <member name="M:ACBr.Net.Core.Extensions.XmlNodeExtensions.GetValue``1(System.Xml.XmlNode)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The element.</param>
            <returns>T.</returns>
        </member>
    </members>
</doc>
